using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ObivtuaryMvcApi.Data;
using ObivtuaryMvcApi.Models;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;

namespace ObivtuaryMvcApi.Controllers;

[ApiController]
[Route("api/[controller]")]
public class ObituariesController : ControllerBase
{
    private readonly ApplicationDbContext _context;
    private readonly ILogger<ObituariesController> _logger;

    public ObituariesController(ApplicationDbContext context, ILogger<ObituariesController> logger)
    {
        _context = context;
        _logger = logger;
    }

    /// <summary>
    /// Get all obituaries
    /// </summary>
    [HttpGet]
    public async Task<ActionResult<IEnumerable<Obituary>>> GetObituaries()
    {
        return await _context.Obituaries.ToListAsync();
    }

    /// <summary>
    /// Get a specific obituary by ID
    /// </summary>
    /// <param name="id">The obituary ID</param>
    [HttpGet("{id}")]
    public async Task<ActionResult<Obituary>> GetObituary(int id)
    {
        var obituary = await _context.Obituaries.FindAsync(id);

        if (obituary == null)
        {
            return NotFound($"Obituary with ID {id} not found.");
        }

        return obituary;
    }

    /// <summary>
    /// Create a new obituary
    /// </summary>
    /// <param name="obituary">The obituary data</param>
    [HttpPost]
    [Authorize] // Require authentication
    public async Task<ActionResult<Obituary>> CreateObituary(ObituaryCreateDto obituaryDto)
    {
        // Get the current user's ID
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            return Unauthorized("User ID not found in token.");
        }

        var obituary = new Obituary
        {
            FullName = obituaryDto.FullName,
            DateOfBirth = obituaryDto.DateOfBirth,
            DateOfDeath = obituaryDto.DateOfDeath,
            Biography = obituaryDto.Biography,
            Photo = obituaryDto.Photo,
            CreatedByUserId = userId,
            CreatedAt = DateTime.UtcNow,
            UpdatedAt = DateTime.UtcNow
        };

        _context.Obituaries.Add(obituary);
        await _context.SaveChangesAsync();

        return CreatedAtAction(nameof(GetObituary), new { id = obituary.Id }, obituary);
    }

    /// <summary>
    /// Update an existing obituary
    /// </summary>
    /// <param name="id">The obituary ID</param>
    /// <param name="obituary">The updated obituary data</param>
    [HttpPut("{id}")]
    [Authorize] // Require authentication
    public async Task<IActionResult> UpdateObituary(int id, ObituaryUpdateDto obituaryDto)
    {
        var obituary = await _context.Obituaries.FindAsync(id);
        if (obituary == null)
        {
            return NotFound($"Obituary with ID {id} not found.");
        }

        // Check if the current user is the creator or has admin rights
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var isAdmin = User.IsInRole("Admin");
        
        if (obituary.CreatedByUserId != userId && !isAdmin)
        {
            return Forbid("You can only update obituaries you created, or you must be an Admin.");
        }

        // Update properties
        obituary.FullName = obituaryDto.FullName;
        obituary.DateOfBirth = obituaryDto.DateOfBirth;
        obituary.DateOfDeath = obituaryDto.DateOfDeath;
        obituary.Biography = obituaryDto.Biography;
        obituary.Photo = obituaryDto.Photo;
        obituary.UpdatedAt = DateTime.UtcNow;

        try
        {
            await _context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ObituaryExists(id))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
        }

        return NoContent();
    }

    /// <summary>
    /// Delete an obituary
    /// </summary>
    /// <param name="id">The obituary ID</param>
    [HttpDelete("{id}")]
    [Authorize] // Require authentication
    public async Task<IActionResult> DeleteObituary(int id)
    {
        var obituary = await _context.Obituaries.FindAsync(id);
        if (obituary == null)
        {
            return NotFound($"Obituary with ID {id} not found.");
        }

        // Check if the current user is the creator or has admin rights
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var isAdmin = User.IsInRole("Admin");
        
        if (obituary.CreatedByUserId != userId && !isAdmin)
        {
            return Forbid("You can only delete obituaries you created, or you must be an Admin.");
        }

        _context.Obituaries.Remove(obituary);
        await _context.SaveChangesAsync();

        return NoContent();
    }

    /// <summary>
    /// Get obituaries created by the current user
    /// </summary>
    [HttpGet("my-obituaries")]
    [Authorize]
    public async Task<ActionResult<IEnumerable<Obituary>>> GetMyObituaries()
    {
        var userId = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (string.IsNullOrEmpty(userId))
        {
            return Unauthorized("User ID not found in token.");
        }

        var obituaries = await _context.Obituaries
            .Where(o => o.CreatedByUserId == userId)
            .ToListAsync();

        return obituaries;
    }

    private bool ObituaryExists(int id)
    {
        return _context.Obituaries.Any(e => e.Id == id);
    }
}

/// <summary>
/// DTO for creating a new obituary
/// </summary>
public class ObituaryCreateDto
{
    public required string FullName { get; set; }
    public required DateTime DateOfBirth { get; set; }
    public required DateTime DateOfDeath { get; set; }
    public required string Biography { get; set; } = string.Empty;
    public byte[]? Photo { get; set; }
}

/// <summary>
/// DTO for updating an existing obituary
/// </summary>
public class ObituaryUpdateDto
{
    public required string FullName { get; set; }
    public required DateTime DateOfBirth { get; set; }
    public required DateTime DateOfDeath { get; set; }
    public required string Biography { get; set; } = string.Empty;
    public byte[]? Photo { get; set; }
}