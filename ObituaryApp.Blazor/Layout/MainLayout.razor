@inherits LayoutComponentBase
@inject IAuthService AuthService
@inject IJSRuntime JSRuntime

<div class="page">
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary">
        <div class="container">
            <a class="navbar-brand" href="/">
                <i class="bi bi-heart"></i> Obituary System
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link" href="/">Home</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" href="/obituaries">Obituaries</a>
                    </li>
                    @if (isAuthenticated)
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/obituaries/create">Create Obituary</a>
                        </li>
                    }
                </ul>
                
                <ul class="navbar-nav">
                    @if (isAuthenticated)
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                                <i class="bi bi-person-circle"></i> 
                                @if (!string.IsNullOrEmpty(userRole))
                                {
                                    <text>@userRole.ToUpper()</text>
                                }
                                else
                                {
                                    <text>Account</text>
                                }
                            </a>
                            <ul class="dropdown-menu">
                                @if (!string.IsNullOrEmpty(userRole))
                                {
                                    <li><span class="dropdown-item-text">Role: @userRole</span></li>
                                    <li><hr class="dropdown-divider"></li>
                                }
                                <li><button class="dropdown-item" @onclick="Logout">
                                    <i class="bi bi-box-arrow-right"></i> Logout
                                </button></li>
                            </ul>
                        </li>
                    }
                    else
                    {
                        <li class="nav-item">
                            <a class="nav-link" href="/login">Login</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/register">Register</a>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </nav>

    <main>
        <article>
            @Body
        </article>
    </main>
</div>

@code {
    private bool isAuthenticated = false;
    private string userRole = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await UpdateAuthState();
        AuthService.OnAuthStateChanged += OnAuthStateChanged;
    }

    private async Task UpdateAuthState()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            userRole = await AuthService.GetUserRoleAsync() ?? string.Empty;
        }
    }

    private void OnAuthStateChanged()
    {
        InvokeAsync(async () =>
        {
            await UpdateAuthState();
            StateHasChanged();
        });
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        await UpdateAuthState();
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthService.OnAuthStateChanged -= OnAuthStateChanged;
    }
}
