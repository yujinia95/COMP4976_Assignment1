@page "/obituaries/{Id:int}"
@using ObituaryApp.Blazor.Models
@using ObituaryApp.Blazor.Services
@inject IObituaryService ObituaryService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>@(obituary?.FullName ?? "Obituary Details")</PageTitle>

@if (loading)
{
    <div class="text-center mt-5">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (obituary == null)
{
    <div class="alert alert-danger mt-4">
        <h4>Obituary Not Found</h4>
        <p>The requested obituary could not be found.</p>
        <a href="/obituaries" class="btn btn-primary">Back to Obituaries</a>
    </div>
}
else
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="/obituaries">Obituaries</a></li>
                        <li class="breadcrumb-item active" aria-current="page">@obituary.FullName</li>
                    </ol>
                </nav>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-4 mb-4">
                @if (!string.IsNullOrEmpty(obituary.PhotoDataUrl))
                {
                    <img src="@obituary.PhotoDataUrl" class="img-fluid rounded shadow" alt="@obituary.FullName" style="width: 100%; max-height: 400px; object-fit: cover;" />
                }
                else
                {
                    <div class="bg-light rounded shadow d-flex align-items-center justify-content-center" style="width: 100%; height: 300px;">
                        <i class="bi bi-person-circle" style="font-size: 6rem; color: #6c757d;"></i>
                    </div>
                }
            </div>

            <div class="col-lg-8">
                <div class="d-flex justify-content-between align-items-start mb-3">
                    <h1 class="display-4">@obituary.FullName</h1>
                    @if (canEdit)
                    {
                        <div class="btn-group">
                            <a href="/obituaries/@Id/edit" class="btn btn-outline-primary">
                                <i class="bi bi-pencil"></i> Edit
                            </a>
                            <button class="btn btn-outline-danger" @onclick="DeleteObituary">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </div>
                    }
                </div>

                <div class="card mb-4">
                    <div class="card-body">
                        <h5 class="card-title">Life Details</h5>
                        <div class="row">
                            @if (obituary.DateOfBirth.HasValue)
                            {
                                <div class="col-md-6">
                                    <strong>Date of Birth:</strong><br />
                                    <span class="text-muted">@obituary.DateOfBirth.Value.ToString("MMMM dd, yyyy")</span>
                                </div>
                            }
                            @if (obituary.DateOfDeath.HasValue)
                            {
                                <div class="col-md-6">
                                    <strong>Date of Death:</strong><br />
                                    <span class="text-muted">@obituary.DateOfDeath.Value.ToString("MMMM dd, yyyy")</span>
                                </div>
                            }
                        </div>
                        @if (obituary.DateOfBirth.HasValue && obituary.DateOfDeath.HasValue)
                        {
                            <div class="mt-3">
                                <strong>Age at Death:</strong> 
                                <span class="text-muted">@CalculateAge(obituary.DateOfBirth.Value, obituary.DateOfDeath.Value) years old</span>
                            </div>
                        }
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(obituary.Biography))
                {
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Biography</h5>
                            <div class="card-text" style="white-space: pre-wrap;">@obituary.Biography</div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-12">
                <a href="/obituaries" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Back to Obituaries
                </a>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private Obituary? obituary;
    private bool loading = true;
    private bool canEdit = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadObituary();
        await CheckEditPermissions();
    }

    private async Task LoadObituary()
    {
        loading = true;
        try
        {
            obituary = await ObituaryService.GetObituaryByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading obituary: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task CheckEditPermissions()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            var userRole = await AuthService.GetUserRoleAsync();
            canEdit = userRole == "admin"; // For now, only admins can edit
        }
    }

    private async Task DeleteObituary()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete the obituary for {obituary?.FullName}? This action cannot be undone.");
        
        if (confirmed && obituary != null)
        {
            var success = await ObituaryService.DeleteObituaryAsync(obituary.Id);
            if (success)
            {
                Navigation.NavigateTo("/obituaries");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Failed to delete obituary. Please try again.");
            }
        }
    }

    private int CalculateAge(DateOnly birthDate, DateOnly deathDate)
    {
        var age = deathDate.Year - birthDate.Year;
        if (deathDate.Month < birthDate.Month || (deathDate.Month == birthDate.Month && deathDate.Day < birthDate.Day))
        {
            age--;
        }
        return age;
    }
}