@page "/register"
@using ObituaryApp.Blazor.Models
@using ObituaryApp.Blazor.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Register</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow">
                <div class="card-body">
                    <div class="text-center mb-4">
                        <i class="bi bi-person-plus-fill" style="font-size: 3rem; color: #198754;"></i>
                        <h2 class="card-title mt-2">Create Account</h2>
                        <p class="text-muted">Join us today</p>
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(successMessage))
                    {
                        <div class="alert alert-success" role="alert">
                            @successMessage
                        </div>
                    }

                    <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email Address</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-envelope"></i>
                                </span>
                                <InputText id="email" class="form-control" @bind-Value="registerModel.Email" 
                                         placeholder="Enter your email address" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock"></i>
                                </span>
                                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" 
                                         placeholder="Choose a strong password" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.Password)" />
                            <div class="form-text">Password must be at least 6 characters long.</div>
                        </div>

                        <div class="mb-4">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="bi bi-lock-fill"></i>
                                </span>
                                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" 
                                         placeholder="Confirm your password" />
                            </div>
                            <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-success" disabled="@isRegistering">
                                @if (isRegistering)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    <text>Creating Account...</text>
                                }
                                else
                                {
                                    <i class="bi bi-person-plus me-2"></i>
                                    <text>Create Account</text>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-4">
                        <p class="mb-0">Already have an account? <a href="/login" class="text-decoration-none">Sign in here</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RegisterRequest registerModel = new();
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private bool isRegistering = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (isAuthenticated)
        {
            Navigation.NavigateTo("/obituaries");
        }
    }

    private async Task HandleRegister()
    {
        isRegistering = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var success = await AuthService.RegisterAsync(registerModel);
            
            if (success)
            {
                successMessage = "Account created successfully! You can now sign in.";
                registerModel = new RegisterRequest(); // Clear form
                
                // Redirect to login page after a short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/login");
            }
            else
            {
                errorMessage = "Registration failed. Please check your information and try again. If the API is not running, registration will not work.";
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Unable to connect to the registration service. Please ensure the API is running and try again.";
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Registration error: {ex.Message}");
            errorMessage = "An error occurred during registration. Please try again later.";
        }
        finally
        {
            isRegistering = false;
        }
    }
}